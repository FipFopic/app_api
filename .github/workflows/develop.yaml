name: Build Develop
on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ main ]

env:
  API_VERSION: '1.0.0'

jobs:

  build:
    if: "!contains(github.event.commits[0].message, '[skip ci]')"
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 18.x ]
    steps:
      - uses: actions/checkout@v3

      - name: Starting Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      #      - name: Lint code
      #        run: |
      #          npm run lint

  deploy-sever:
    if: "!contains(github.event.commits[0].message, '[skip ci]') && github.ref == 'refs/heads/main'"
    name: Deploy to server
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install modules, build
        run: |
          npm ci
          npm run build --if-present

      - name: Archive files
        run: |
          mkdir ../build
          cp -TR ./dist ../build/dist
          cp ./package.json ../build
          tar -cvf deploy.tar ../build/

      - name: Copy files
        uses: appleboy/scp-action@master
        env:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          PORT: ${{ secrets.APP_PORT }}
          PASSWORD: ${{ secrets.PASSWORD }}
        with:
          source: "deploy.tar"
          target: "/root/backend/app"

  run-docker:
    if: "!contains(github.event.commits[0].message, '[skip ci]') && github.ref == 'refs/heads/main'"
    name: Run docker
    needs: [ build, deploy-sever ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Remote command
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          PORT: ${{ secrets.APP_PORT }}
          PASSWORD: ${{ secrets.PASSWORD }}
          script: |
            cd /root/backend/app
            ls | grep -v deploy.tar | xargs rm -rfv
            rm deploy.tar
            cd build
            export NVM_DIR=~/.nvm
            source ~/.nvm/nvm.sh
            nvm use 16
            npm ci
            npm run build
